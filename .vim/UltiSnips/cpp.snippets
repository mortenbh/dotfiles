snippet lic "Description" !b
/** @file`!p
import os
name, ext = os.path.splitext(snip.fn.lower())
if ext in ('.h', '.hpp'):
	snip.rv = """
 *
 *  @brief      %s""" % name`
 *
 *  @date       `!v strftime('%d-%m-%Y %H:%M:%S')`
 *  @author     Morten Bojsen-Hansen <mortenbh@ist.ac.at>
 *  @copyright  Morten Bojsen-Hansen (c) `!v strftime('%Y')`
 */
endsnippet

snippet once "Include header once only guard" !b
#ifndef ${1:`!p
if not snip.c:
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('_%s' % name)
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif // $1
endsnippet

snippet ns "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/\/ namespace /m}$1${1/.+//m}
endsnippet

snippet cl "class .. (class)" !
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet for "for loop (fori)" !
for (${4:unsigned} ${2:i}=0; $2<${1:count}; ${3:++$2})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet cout "cout"
std::cout << $0 << std::endl;
endsnippet

snippet map "std::map (map)" !
std::map<${1:key}, ${2:value}> ${0:map};
endsnippet

snippet vector "std::vector (v)" !
std::vector<${1:int}> ${0:v};
endsnippet

snippet ref "reference" w
${1:type} &${2:name}
endsnippet

snippet cref "const reference" w
const ${1:type} &${2:name}
endsnippet
